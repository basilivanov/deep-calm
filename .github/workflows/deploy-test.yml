name: Deploy Test

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: "3.12"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: test
    env:
      REGISTRY_URL: ${{ secrets.DC_REGISTRY_URL }}
      REGISTRY_USER: ${{ secrets.DC_REGISTRY_USER }}
      REGISTRY_PASSWORD: ${{ secrets.DC_REGISTRY_PASSWORD }}
      TEST_SSH_HOST: ${{ secrets.DC_TEST_SSH_HOST }}
      TEST_SSH_USER: ${{ secrets.DC_TEST_SSH_USER }}
      TEST_SSH_KEY: ${{ secrets.DC_TEST_SSH_KEY }}
      RUN_DEPLOY: ${{ secrets.DC_REGISTRY_URL != '' && secrets.DC_REGISTRY_USER != '' && secrets.DC_REGISTRY_PASSWORD != '' && secrets.DC_TEST_SSH_HOST != '' && secrets.DC_TEST_SSH_USER != '' && secrets.DC_TEST_SSH_KEY != '' }}

    steps:
      - name: Check secrets and skip if absent
        if: ${{ env.RUN_DEPLOY != 'true' }}
        run: echo "Required DC_* secrets are missing â€” deploy-test skipped."

      - name: Checkout
        if: ${{ env.RUN_DEPLOY == 'true' }}
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        if: ${{ env.RUN_DEPLOY == 'true' }}
        uses: docker/setup-buildx-action@v3

      - name: Log in to registry
        if: ${{ env.RUN_DEPLOY == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build and push API image
        if: ${{ env.RUN_DEPLOY == 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.api
          push: true
          tags: |
            ${{ env.REGISTRY_URL }}/deep-calm-api:test

      - name: Build and push Frontend image
        if: ${{ env.RUN_DEPLOY == 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.frontend
          push: true
          tags: |
            ${{ env.REGISTRY_URL }}/deep-calm-frontend:test

      - name: Deploy to TEST
        if: ${{ env.RUN_DEPLOY == 'true' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.TEST_SSH_HOST }}
          username: ${{ env.TEST_SSH_USER }}
          key: ${{ env.TEST_SSH_KEY }}
          script: |
            set -euo pipefail
            docker login ${{ env.REGISTRY_URL }} -u ${{ env.REGISTRY_USER }} -p ${{ env.REGISTRY_PASSWORD }}
            docker pull ${{ env.REGISTRY_URL }}/deep-calm-api:test
            docker pull ${{ env.REGISTRY_URL }}/deep-calm-frontend:test
            docker tag ${{ env.REGISTRY_URL }}/deep-calm-api:test deep-calm-api:test
            docker tag ${{ env.REGISTRY_URL }}/deep-calm-frontend:test deep-calm-frontend:test
            cd /opt/deep-calm/test
            mkdir -p ../backups
            if [ -n "$(docker compose ps -q dc-db)" ]; then
              docker compose exec -T dc-db pg_dump -U dc dc_test > ../backups/dc_test_$(date +%Y%m%d%H%M%S).sql
            else
              echo "dc-db not running, skipping snapshot"
            fi
            docker compose down
            docker compose up -d
            for i in $(seq 1 30); do
              if docker compose exec -T -e PGPASSWORD=dcpass dc-db pg_isready -U dc -d dc_test >/dev/null 2>&1; then
                echo "dc-db is accepting connections"
                break
              fi
              if [ "$i" -eq 30 ]; then
                echo "Postgres (dc-db) did not become ready" >&2
                exit 1
              fi
              echo "Waiting for dc-db to become ready ($i/30)..."
              sleep 5
            done
            for i in $(seq 1 30); do
              status=$(docker inspect -f '{{.State.Status}}' dc-test-api 2>/dev/null || true)
              health=$(docker inspect -f '{{if .State.Health}}{{.State.Health.Status}}{{else}}none{{end}}' dc-test-api 2>/dev/null || true)
              if [ "$status" = "running" ] && { [ "$health" = "healthy" ] || [ "$health" = "none" ] || [ "$health" = "starting" ]; }; then
                echo "dc-test-api is $status (health: $health)"
                break
              fi
              if [ "$i" -eq 30 ]; then
                echo "dc-test-api did not become ready" >&2
                exit 1
              fi
              echo "Waiting for dc-test-api to become ready ($i/30)..."
              sleep 5
            done
            docker compose exec -T dc-api alembic upgrade head
