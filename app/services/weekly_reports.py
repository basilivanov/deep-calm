"""
DeepCalm ‚Äî Weekly Reports Service

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ AI Analyst.
"""
import json
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
import structlog
from sqlalchemy.orm import Session
from sqlalchemy import func

from app.core.db import get_db
from app.models.setting import Setting
from app.models.campaign import Campaign
from app.models.creative import Creative
from app.models.lead import Lead
from app.models.conversion import Conversion
from app.services.ai_analyst import AIAnalystService

logger = structlog.get_logger(__name__)


class WeeklyReportsService:
    """–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""

    def __init__(self, db: Session):
        self.db = db
        self.ai_analyst = AIAnalystService(db)
        self._settings = {}
        self._load_settings()

    def _load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤"""
        operational_settings = self.db.query(Setting).filter(
            Setting.category == "operational"
        ).all()

        for setting in operational_settings:
            if setting.value_type == "bool":
                value = setting.value.lower() in ('true', '1', 'yes', 'on')
            elif setting.value_type == "int":
                value = int(setting.value)
            elif setting.value_type == "float":
                value = float(setting.value)
            else:
                value = setting.value

            self._settings[setting.key] = value

        logger.info("reports_settings_loaded", count=len(self._settings))

    def is_reports_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –æ—Ç—á–µ—Ç—ã"""
        return self._settings.get("reports_enabled", False)

    def get_reports_email(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç email –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
        return self._settings.get("reports_email", "admin@deepcalm.local")

    def get_weekly_data(self, weeks_back: int = 1) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –Ω–µ–¥–µ–ª—å"""
        end_date = datetime.now()
        start_date = end_date - timedelta(weeks=weeks_back)

        logger.info("collecting_weekly_data", start_date=start_date, end_date=end_date)

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
        campaigns = self.db.query(Campaign).filter(
            Campaign.status.in_(["active", "paused"])
        ).all()

        # –õ–∏–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        leads = self.db.query(Lead).filter(
            Lead.created_at >= start_date,
            Lead.created_at <= end_date
        ).all()

        # –ö–æ–Ω–≤–µ—Ä—Å–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        conversions = self.db.query(Conversion).filter(
            Conversion.converted_at >= start_date,
            Conversion.converted_at <= end_date
        ).all()

        # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_leads = len(leads)
        total_conversions = len(conversions)
        total_revenue = sum(c.revenue_rub for c in conversions)
        conversion_rate = (total_conversions / total_leads * 100) if total_leads > 0 else 0

        # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º
        campaign_metrics = []
        for campaign in campaigns:
            campaign_leads = [l for l in leads if campaign.title.lower() in (l.utm_campaign or "").lower()]
            campaign_conversions = [c for c in conversions if c.campaign_id == campaign.id]

            campaign_revenue = sum(c.revenue_rub for c in campaign_conversions)
            campaign_spend = campaign.spent_rub or 0
            campaign_roas = (campaign_revenue / campaign_spend) if campaign_spend > 0 else 0
            campaign_cac = (campaign_spend / len(campaign_conversions)) if campaign_conversions else 0

            campaign_metrics.append({
                "id": campaign.id,
                "title": campaign.title,
                "sku": campaign.sku,
                "status": campaign.status,
                "leads": len(campaign_leads),
                "conversions": len(campaign_conversions),
                "revenue": campaign_revenue,
                "spend": campaign_spend,
                "roas": round(campaign_roas, 2),
                "cac": round(campaign_cac, 2),
                "target_cac": campaign.target_cac_rub,
                "target_roas": campaign.target_roas
            })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é ROAS
        campaign_metrics.sort(key=lambda x: x["roas"], reverse=True)

        return {
            "period": {
                "start_date": start_date.isoformat(),
                "end_date": end_date.isoformat(),
                "weeks": weeks_back
            },
            "summary": {
                "total_leads": total_leads,
                "total_conversions": total_conversions,
                "total_revenue": total_revenue,
                "conversion_rate": round(conversion_rate, 2),
                "active_campaigns": len(campaigns)
            },
            "campaigns": campaign_metrics,
            "top_performers": campaign_metrics[:3] if campaign_metrics else [],
            "needs_attention": [c for c in campaign_metrics if c["roas"] < c.get("target_roas", 2.0)]
        }

    def generate_ai_summary(self, weekly_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç AI —Ä–µ–∑—é–º–µ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            prompt = self._create_weekly_report_prompt(weekly_data)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI Analyst –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
            response = self.ai_analyst.openai_client.chat.completions.create(
                model=self.ai_analyst._settings.get("ai_model", "gpt-4"),
                messages=[
                    {"role": "system", "content": self._create_weekly_system_prompt()},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.2,  # –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
                max_tokens=1500
            )

            return response.choices[0].message.content

        except Exception as e:
            logger.error("ai_summary_failed", error=str(e))
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI –∞–Ω–∞–ª–∏–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API."

    def _create_weekly_system_prompt(self) -> str:
        """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        return """–¢—ã —Å–æ–∑–¥–∞–µ—à—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –º–∞—Å—Å–∞–∂–Ω–æ–≥–æ —Å–∞–ª–æ–Ω–∞ –æ performance –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ.

–§–û–†–ú–ê–¢ –û–¢–ß–ï–¢–ê:
üìä –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢ DEEPCALM

üìà –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò
[–ö—Ä–∞—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º]

üèÜ –¢–û–ü-–ö–ê–ú–ü–ê–ù–ò–ò
[3 –ª—É—á—à–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏ —É—Å–ø–µ—Ö–∞]

‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢ –í–ù–ò–ú–ê–ù–ò–Ø
[–ö–∞–º–ø–∞–Ω–∏–∏ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏]

üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ù–ê –°–õ–ï–î–£–Æ–©–£–Æ –ù–ï–î–ï–õ–Æ
[3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π]

üí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –í–´–í–û–î–´
[ROI, –±—é–¥–∂–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏]

–°–¢–ò–õ–¨:
- –î–µ–ª–æ–≤–æ–π, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
- Actionable —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –§–æ–∫—É—Å –Ω–∞ ROI –∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏"""

    def _create_weekly_report_prompt(self, data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ–¥–µ–ª–∏"""
        summary = data["summary"]
        campaigns = data["campaigns"]
        top_performers = data["top_performers"]
        needs_attention = data["needs_attention"]

        prompt = f"""–î–ê–ù–ù–´–ï –ó–ê –ù–ï–î–ï–õ–Æ ({data["period"]["start_date"][:10]} - {data["period"]["end_date"][:10]}):

–û–ë–©–ò–ï –ú–ï–¢–†–ò–ö–ò:
- –õ–∏–¥—ã: {summary["total_leads"]}
- –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: {summary["total_conversions"]}
- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {summary["conversion_rate"]}%
- –í—ã—Ä—É—á–∫–∞: {summary["total_revenue"]:,.0f} ‚ÇΩ
- –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏: {summary["active_campaigns"]}

–¢–û–ü-3 –ö–ê–ú–ü–ê–ù–ò–ò:"""

        for i, campaign in enumerate(top_performers, 1):
            prompt += f"""
{i}. {campaign["title"]} ({campaign["sku"]})
   - ROAS: {campaign["roas"]} (—Ü–µ–ª—å: {campaign.get("target_roas", "N/A")})
   - CAC: {campaign["cac"]:,.0f} ‚ÇΩ (—Ü–µ–ª—å: {campaign.get("target_cac", "N/A")} ‚ÇΩ)
   - –õ–∏–¥—ã: {campaign["leads"]}, –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: {campaign["conversions"]}
   - –í—ã—Ä—É—á–∫–∞: {campaign["revenue"]:,.0f} ‚ÇΩ"""

        if needs_attention:
            prompt += f"\n\n–ü–†–û–ë–õ–ï–ú–ù–´–ï –ö–ê–ú–ü–ê–ù–ò–ò:"
            for campaign in needs_attention[:3]:
                prompt += f"""
- {campaign["title"]}: ROAS {campaign["roas"]} (–Ω–∏–∂–µ —Ü–µ–ª–∏ {campaign.get("target_roas", 2.0)})"""

        prompt += "\n\n–°–æ–∑–¥–∞–π comprehensive –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."

        return prompt

    def generate_weekly_report(self, weeks_back: int = 1) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        if not self.is_reports_enabled():
            logger.warning("weekly_reports_disabled")
            return {
                "status": "disabled",
                "message": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
            }

        try:
            logger.info("generating_weekly_report", weeks_back=weeks_back)

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            weekly_data = self.get_weekly_data(weeks_back)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –∞–Ω–∞–ª–∏–∑
            ai_summary = self.generate_ai_summary(weekly_data)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = {
                "id": f"weekly_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                "generated_at": datetime.now().isoformat(),
                "period": weekly_data["period"],
                "summary": weekly_data["summary"],
                "ai_analysis": ai_summary,
                "detailed_data": {
                    "top_performers": weekly_data["top_performers"],
                    "needs_attention": weekly_data["needs_attention"],
                    "all_campaigns": weekly_data["campaigns"]
                },
                "settings": {
                    "reports_email": self.get_reports_email(),
                    "auto_generated": True
                }
            }

            logger.info("weekly_report_generated",
                       report_id=report["id"],
                       campaigns_count=len(weekly_data["campaigns"]),
                       total_revenue=weekly_data["summary"]["total_revenue"])

            return report

        except Exception as e:
            logger.error("weekly_report_generation_failed", error=str(e))
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"
            }

    def format_report_for_email(self, report: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ email"""
        if report.get("status") in ["disabled", "error"]:
            return report.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")

        summary = report["summary"]
        period = report["period"]

        email_content = f"""
üìä –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢ DEEPCALM

üìÖ –ü–µ—Ä–∏–æ–¥: {period["start_date"][:10]} - {period["end_date"][:10]}

üìà –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò:
‚Ä¢ –õ–∏–¥—ã: {summary["total_leads"]}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: {summary["total_conversions"]} (CR: {summary["conversion_rate"]}%)
‚Ä¢ –í—ã—Ä—É—á–∫–∞: {summary["total_revenue"]:,.0f} ‚ÇΩ
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏: {summary["active_campaigns"]}

{report["ai_analysis"]}

üèÜ –¢–û–ü-–ö–ê–ú–ü–ê–ù–ò–ò:
"""

        for i, campaign in enumerate(report["detailed_data"]["top_performers"], 1):
            email_content += f"""
{i}. {campaign["title"]} ({campaign["sku"]})
   ROAS: {campaign["roas"]} | CAC: {campaign["cac"]:,.0f} ‚ÇΩ
   –õ–∏–¥—ã: {campaign["leads"]} | –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: {campaign["conversions"]}
   –í—ã—Ä—É—á–∫–∞: {campaign["revenue"]:,.0f} ‚ÇΩ
"""

        if report["detailed_data"]["needs_attention"]:
            email_content += "\n‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢ –í–ù–ò–ú–ê–ù–ò–Ø:\n"
            for campaign in report["detailed_data"]["needs_attention"][:3]:
                email_content += f"‚Ä¢ {campaign['title']}: ROAS {campaign['roas']} (—Ü–µ–ª—å: {campaign.get('target_roas', 'N/A')})\n"

        email_content += f"""
---
ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç DeepCalm AI
üìß –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤: /settings
"""

        return email_content