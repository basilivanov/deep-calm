"""
DeepCalm ‚Äî Task Scheduler

APScheduler –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á (–æ—Ç—á–µ—Ç—ã, –∞–Ω–∞–ª–∏–∑).
"""
import asyncio
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import structlog

from app.core.db import SessionLocal
from app.services.weekly_reports import WeeklyReportsService

logger = structlog.get_logger(__name__)


class DeepCalmScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á DeepCalm"""

    def __init__(self):
        self.scheduler = AsyncIOScheduler()
        self._setup_jobs()

    def _setup_jobs(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""

        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã (–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 9:00)
        self.scheduler.add_job(
            func=self._generate_weekly_report,
            trigger=CronTrigger(day_of_week='mon', hour=9, minute=0),
            id='weekly_report',
            name='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞',
            replace_existing=True
        )

        # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00)
        self.scheduler.add_job(
            func=self._daily_campaign_check,
            trigger=CronTrigger(hour=10, minute=0),
            id='daily_check',
            name='–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π',
            replace_existing=True
        )

        logger.info("scheduler_jobs_configured", jobs_count=len(self.scheduler.get_jobs()))

    async def _generate_weekly_report(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            logger.info("scheduled_weekly_report_started")

            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
            db = SessionLocal()
            try:
                reports_service = WeeklyReportsService(db)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç—á–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã
                if not reports_service.is_reports_enabled():
                    logger.info("weekly_reports_disabled_skipping")
                    return

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                report = reports_service.generate_weekly_report(weeks_back=1)

                if report.get("status") == "error":
                    logger.error("scheduled_report_failed", error=report.get("message"))
                    return

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è email
                email_content = reports_service.format_report_for_email(report)

                # TODO: –û—Ç–ø—Ä–∞–≤–∫–∞ email
                # await send_email(
                #     to=reports_service.get_reports_email(),
                #     subject=f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç DeepCalm {report['period']['start_date'][:10]}",
                #     body=email_content
                # )

                logger.info(
                    "scheduled_weekly_report_completed",
                    report_id=report["id"],
                    email=reports_service.get_reports_email()
                )

            finally:
                db.close()

        except Exception as e:
            logger.error("scheduled_weekly_report_error", error=str(e))

    async def _daily_campaign_check(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã"""
        try:
            logger.info("scheduled_daily_check_started")

            db = SessionLocal()
            try:
                reports_service = WeeklyReportsService(db)

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
                data = reports_service.get_weekly_data(weeks_back=1)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–º–ø–∞–Ω–∏–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
                needs_attention = data.get("needs_attention", [])

                if needs_attention:
                    logger.warning(
                        "campaigns_need_attention",
                        count=len(needs_attention),
                        campaigns=[c["title"] for c in needs_attention[:3]]
                    )

                    # TODO: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack/Telegram
                    # await send_alert(f"‚ö†Ô∏è {len(needs_attention)} –∫–∞–º–ø–∞–Ω–∏–π —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")

                else:
                    logger.info("all_campaigns_performing_well")

            finally:
                db.close()

        except Exception as e:
            logger.error("scheduled_daily_check_error", error=str(e))

    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            self.scheduler.start()
            logger.info("scheduler_started", jobs=len(self.scheduler.get_jobs()))

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            for job in self.scheduler.get_jobs():
                next_run = job.next_run_time
                logger.info(
                    "scheduled_job",
                    job_id=job.id,
                    job_name=job.name,
                    next_run=next_run.isoformat() if next_run else "N/A"
                )

        except Exception as e:
            logger.error("scheduler_start_failed", error=str(e))

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            self.scheduler.shutdown()
            logger.info("scheduler_stopped")
        except Exception as e:
            logger.error("scheduler_stop_failed", error=str(e))

    def get_status(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        jobs_info = []
        for job in self.scheduler.get_jobs():
            jobs_info.append({
                "id": job.id,
                "name": job.name,
                "next_run": job.next_run_time.isoformat() if job.next_run_time else None,
                "trigger": str(job.trigger)
            })

        return {
            "running": self.scheduler.running,
            "jobs_count": len(self.scheduler.get_jobs()),
            "jobs": jobs_info
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = DeepCalmScheduler()