"""
DeepCalm ‚Äî Reports API

Endpoints –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞–º–∏.
"""
from typing import Optional
from fastapi import APIRouter, Depends, HTTPException, BackgroundTasks
from sqlalchemy.orm import Session
import structlog

from app.core.db import get_db
from app.services.weekly_reports import WeeklyReportsService
from app.services.scheduler import scheduler
from app.schemas.reports import (
    WeeklyReportResponse,
    ReportGenerationRequest,
    ReportStatusResponse
)

logger = structlog.get_logger(__name__)
router = APIRouter()


def get_reports_service(db: Session = Depends(get_db)) -> WeeklyReportsService:
    """Dependency –¥–ª—è Reports Service"""
    return WeeklyReportsService(db)


@router.post("/reports/weekly/generate", response_model=WeeklyReportResponse)
def generate_weekly_report(
    request: Optional[ReportGenerationRequest] = None,
    reports: WeeklyReportsService = Depends(get_reports_service)
):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞

    –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å AI –∞–Ω–∞–ª–∏–∑–æ–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    """
    weeks_back = request.weeks_back if request else 1

    logger.info("generate_weekly_report_request", weeks_back=weeks_back)

    try:
        report = reports.generate_weekly_report(weeks_back)

        if report.get("status") in ["disabled", "error"]:
            raise HTTPException(
                status_code=400,
                detail=report.get("message", "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
            )

        return WeeklyReportResponse(**report)

    except Exception as e:
        logger.error("report_generation_failed", error=str(e))
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")


@router.get("/reports/weekly/preview")
def preview_weekly_data(
    weeks_back: int = 1,
    reports: WeeklyReportsService = Depends(get_reports_service)
):
    """
    –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ AI –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    """
    logger.info("preview_weekly_data", weeks_back=weeks_back)

    try:
        data = reports.get_weekly_data(weeks_back)
        return data

    except Exception as e:
        logger.error("preview_data_failed", error=str(e))
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")


@router.get("/reports/status", response_model=ReportStatusResponse)
def get_reports_status(
    reports: WeeklyReportsService = Depends(get_reports_service)
):
    """
    –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤.
    """
    try:
        status = {
            "reports_enabled": reports.is_reports_enabled(),
            "reports_email": reports.get_reports_email(),
            "ai_available": bool(reports.ai_analyst._settings.get("openai_api_key")),
            "last_check": "2025-10-01T20:50:00Z"  # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        }

        if not status["reports_enabled"]:
            status["message"] = "–û—Ç—á–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
        elif not status["ai_available"]:
            status["message"] = "OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        else:
            status["message"] = "–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ"

        return ReportStatusResponse(**status)

    except Exception as e:
        logger.error("reports_status_failed", error=str(e))
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")


@router.post("/reports/weekly/email")
def send_weekly_report_email(
    background_tasks: BackgroundTasks,
    request: Optional[ReportGenerationRequest] = None,
    reports: WeeklyReportsService = Depends(get_reports_service)
):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ email

    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ email –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    """
    weeks_back = request.weeks_back if request else 1

    logger.info("send_weekly_report_email", weeks_back=weeks_back)

    if not reports.is_reports_enabled():
        raise HTTPException(
            status_code=400,
            detail="–û—Ç—á–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ background
    background_tasks.add_task(
        _send_report_background,
        reports,
        weeks_back
    )

    return {
        "status": "scheduled",
        "message": f"–û—Ç—á–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {reports.get_reports_email()}",
        "weeks_back": weeks_back
    }


def _send_report_background(reports: WeeklyReportsService, weeks_back: int):
    """Background –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞"""
    try:
        logger.info("background_report_generation_started", weeks_back=weeks_back)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = reports.generate_weekly_report(weeks_back)

        if report.get("status") in ["disabled", "error"]:
            logger.error("background_report_failed", status=report.get("status"))
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è email
        email_content = reports.format_report_for_email(report)

        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å email —Å–µ—Ä–≤–∏—Å–æ–º (SendGrid, AWS SES, etc)
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info(
            "report_email_content_generated",
            report_id=report["id"],
            email=reports.get_reports_email(),
            content_length=len(email_content)
        )

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:
        # send_email(
        #     to=reports.get_reports_email(),
        #     subject=f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç DeepCalm {report['period']['start_date'][:10]}",
        #     body=email_content
        # )

        logger.info("background_report_completed", report_id=report["id"])

    except Exception as e:
        logger.error("background_report_error", error=str(e))


@router.post("/reports/test")
def test_report_generation(
    reports: WeeklyReportsService = Depends(get_reports_service)
):
    """
    –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞

    –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ email.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if not reports.is_reports_enabled():
            return {
                "status": "disabled",
                "message": "–û—Ç—á–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã. –í–∫–ª—é—á–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: reports_enabled = true"
            }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI
        if not reports.ai_analyst._settings.get("openai_api_key"):
            return {
                "status": "no_ai",
                "message": "OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: openai_api_key"
            }

        # –ü–æ–ª—É—á–∞–µ–º preview –¥–∞–Ω–Ω—ã—Ö
        preview_data = reports.get_weekly_data(1)

        return {
            "status": "ok",
            "message": "–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ",
            "preview": {
                "total_leads": preview_data["summary"]["total_leads"],
                "total_conversions": preview_data["summary"]["total_conversions"],
                "active_campaigns": preview_data["summary"]["active_campaigns"],
                "reports_email": reports.get_reports_email()
            }
        }

    except Exception as e:
        logger.error("test_report_failed", error=str(e))
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
        }


@router.get("/reports/scheduler/status")
def get_scheduler_status():
    """
    –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤.
    """
    try:
        status = scheduler.get_status()
        return status
    except Exception as e:
        logger.error("scheduler_status_failed", error=str(e))
        return {
            "running": False,
            "error": str(e)
        }