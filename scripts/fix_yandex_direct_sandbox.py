#!/usr/bin/env python3
"""–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å Client-Login –¥–ª—è –ø–µ—Å–æ—á–Ω–∏—Ü—ã –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç."""

import json
import sys
from pathlib import Path
import urllib.request
import urllib.parse
import urllib.error

ROOT_DIR = Path(__file__).resolve().parent.parent
DEV_ENV_PATH = ROOT_DIR / "dev" / "env"

def load_env_vars():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ dev/env —Ñ–∞–π–ª–∞."""
    env_vars = {}
    if DEV_ENV_PATH.exists():
        for line in DEV_ENV_PATH.read_text().splitlines():
            if line.strip() and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                env_vars[key.strip()] = value.strip()
    return env_vars

def update_env_file(path: Path, updates: dict) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç env —Ñ–∞–π–ª."""
    lines = []
    if path.exists():
        lines = path.read_text(encoding="utf-8").splitlines()

    updated_lines = []
    processed_keys = set()

    for line in lines:
        stripped = line.strip()
        if not stripped or stripped.startswith("#") or "=" not in line:
            updated_lines.append(line)
            continue

        key, _ = line.split("=", 1)
        key = key.strip()
        if key in updates:
            updated_lines.append(f"{key}={updates[key]}")
            processed_keys.add(key)
        else:
            updated_lines.append(line)

    for key, value in updates.items():
        if key not in processed_keys:
            if updated_lines and updated_lines[-1].strip():
                updated_lines.append("")
            updated_lines.append(f"{key}={value}")

    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_text("\\n".join(updated_lines) + "\\n", encoding="utf-8")

def test_api_without_client_login(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –±–µ–∑ Client-Login (–¥–ª—è –ø—Ä—è–º—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)."""
    print("\\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ Client-Login (—Ä–æ–ª—å '–ö–ª–∏–µ–Ω—Ç')...")

    sandbox_url = "https://api-sandbox.direct.yandex.com/json/v5/campaigns"

    headers = {
        "Authorization": f"Bearer {token}",
        "Accept-Language": "ru",
        "Content-Type": "application/json; charset=utf-8",
        "User-Agent": "DeepCalm/1.0",
    }

    payload = {
        "method": "get",
        "params": {
            "SelectionCriteria": {},
            "FieldNames": ["Id", "Name", "Status", "State"]
        }
    }

    try:
        request_data = json.dumps(payload).encode('utf-8')
        req = urllib.request.Request(
            sandbox_url,
            data=request_data,
            headers=headers,
            method='POST'
        )

        with urllib.request.urlopen(req, timeout=15.0) as response:
            status_code = response.getcode()
            response_data = response.read().decode('utf-8')

        if status_code == 200:
            data = json.loads(response_data)
            if "result" in data:
                campaigns = data["result"].get("Campaigns", [])
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π: {len(campaigns)}")
                for campaign in campaigns[:3]:
                    print(f"  - {campaign.get('Name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {campaign.get('Id')})")

                # –£–±–∏—Ä–∞–µ–º Client-Login –∏–∑ env
                print("\\nüìù –û–±–Ω–æ–≤–ª—è–µ–º dev/env (—É–±–∏—Ä–∞–µ–º Client-Login)...")
                updates = {
                    "DC_YANDEX_DIRECT_LOGIN": "",
                    "YANDEX_DIRECT_LOGIN": ""
                }
                update_env_file(DEV_ENV_PATH, updates)
                print("‚úÖ Client-Login —É–±—Ä–∞–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return True
            elif "error" in data:
                error = data["error"]
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {error.get('error_string', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                print(f"   –ö–æ–¥: {error.get('error_code')}")
                return False

    except urllib.error.HTTPError as e:
        status_code = e.code
        response_data = e.read().decode('utf-8')
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {status_code}")
        try:
            error_data = json.loads(response_data)
            print(f"   –î–µ—Ç–∞–ª–∏: {json.dumps(error_data, indent=2, ensure_ascii=False)}")
        except:
            print(f"   –û—Ç–≤–µ—Ç: {response_data}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

    return False

def get_agency_clients(token):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞."""
    print("\\nüîÑ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞...")

    clients_url = "https://api-sandbox.direct.yandex.com/json/v5/agencyclients"

    headers = {
        "Authorization": f"Bearer {token}",
        "Accept-Language": "ru",
        "Content-Type": "application/json; charset=utf-8",
        "User-Agent": "DeepCalm/1.0",
    }

    payload = {
        "method": "get",
        "params": {
            "SelectionCriteria": {},
            "FieldNames": ["Login", "ClientInfo"]
        }
    }

    try:
        request_data = json.dumps(payload).encode('utf-8')
        req = urllib.request.Request(
            clients_url,
            data=request_data,
            headers=headers,
            method='POST'
        )

        with urllib.request.urlopen(req, timeout=15.0) as response:
            status_code = response.getcode()
            response_data = response.read().decode('utf-8')

        if status_code == 200:
            data = json.loads(response_data)
            if "result" in data:
                clients = data["result"].get("Clients", [])
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}")

                if clients:
                    first_client = clients[0]
                    login = first_client.get("Login")
                    print(f"\\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:")
                    for client in clients:
                        print(f"  - –õ–æ–≥–∏–Ω: {client.get('Login')}")

                    if login:
                        print(f"\\nüìù –û–±–Ω–æ–≤–ª—è–µ–º dev/env (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: {login})...")
                        updates = {
                            "DC_YANDEX_DIRECT_LOGIN": login,
                            "YANDEX_DIRECT_LOGIN": login
                        }
                        update_env_file(DEV_ENV_PATH, updates)
                        print(f"‚úÖ Client-Login —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {login}")
                        return login
                else:
                    print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
                    return None
            elif "error" in data:
                error = data["error"]
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {error.get('error_string', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                print(f"   –ö–æ–¥: {error.get('error_code')}")
                return None

    except urllib.error.HTTPError as e:
        status_code = e.code
        response_data = e.read().decode('utf-8')
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {status_code}")
        if status_code == 403:
            print("   –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å —Ä–æ–ª—å '–ö–ª–∏–µ–Ω—Ç', –∞ –Ω–µ '–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ'")
        try:
            error_data = json.loads(response_data)
            print(f"   –î–µ—Ç–∞–ª–∏: {json.dumps(error_data, indent=2, ensure_ascii=False)}")
        except:
            print(f"   –û—Ç–≤–µ—Ç: {response_data}")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

    return None

def test_with_client_login(token, login):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º Client-Login."""
    print(f"\\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å Client-Login: {login}...")

    sandbox_url = "https://api-sandbox.direct.yandex.com/json/v5/campaigns"

    headers = {
        "Authorization": f"Bearer {token}",
        "Accept-Language": "ru",
        "Content-Type": "application/json; charset=utf-8",
        "User-Agent": "DeepCalm/1.0",
        "Client-Login": login
    }

    payload = {
        "method": "get",
        "params": {
            "SelectionCriteria": {},
            "FieldNames": ["Id", "Name", "Status", "State"]
        }
    }

    try:
        request_data = json.dumps(payload).encode('utf-8')
        req = urllib.request.Request(
            sandbox_url,
            data=request_data,
            headers=headers,
            method='POST'
        )

        with urllib.request.urlopen(req, timeout=15.0) as response:
            status_code = response.getcode()
            response_data = response.read().decode('utf-8')

        if status_code == 200:
            data = json.loads(response_data)
            if "result" in data:
                campaigns = data["result"].get("Campaigns", [])
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π: {len(campaigns)}")
                for campaign in campaigns[:3]:
                    print(f"  - {campaign.get('Name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {campaign.get('Id')})")
                return True
            elif "error" in data:
                error = data["error"]
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {error.get('error_string', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                print(f"   –ö–æ–¥: {error.get('error_code')}")
                return False

    except urllib.error.HTTPError as e:
        status_code = e.code
        response_data = e.read().decode('utf-8')
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {status_code}")
        try:
            error_data = json.loads(response_data)
            print(f"   –î–µ—Ç–∞–ª–∏: {json.dumps(error_data, indent=2, ensure_ascii=False)}")
        except:
            print(f"   –û—Ç–≤–µ—Ç: {response_data}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

    return False

def main():
    print("=== –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Client-Login –¥–ª—è –ø–µ—Å–æ—á–Ω–∏—Ü—ã –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç ===\\n")

    env_vars = load_env_vars()
    token = env_vars.get('DC_YANDEX_DIRECT_TOKEN')
    current_login = env_vars.get('DC_YANDEX_DIRECT_LOGIN')

    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ dev/env")
        return 1

    print(f"üîë –¢–æ–∫–µ–Ω: {token[:10]}...")
    if current_login:
        print(f"üë§ –¢–µ–∫—É—â–∏–π –ª–æ–≥–∏–Ω: {current_login}")

    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ Client-Login (—Ä–æ–ª—å "–ö–ª–∏–µ–Ω—Ç")
    if test_api_without_client_login(token):
        print("\\nüéâ –†–µ—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ Client-Login (—Ä–æ–ª—å '–ö–ª–∏–µ–Ω—Ç')")
        return 0

    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
    agency_client_login = get_agency_clients(token)
    if agency_client_login:
        if test_with_client_login(token, agency_client_login):
            print(f"\\nüéâ –†–µ—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º Client-Login {agency_client_login}")
            return 0

    print("\\n" + "="*50)
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–µ—Å–æ—á–Ω–∏—Ü–µ")
    print("\\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏ —Ä–µ—à–µ–Ω–∏—è:")
    print("1. üîß –ü–µ—Å–æ—á–Ω–∏—Ü–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:")
    print("   - –û—Ç–∫—Ä–æ–π—Ç–µ https://direct.yandex.ru")
    print("   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª API ‚Üí –ü–µ—Å–æ—á–Ω–∏—Ü–∞")
    print("   - –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ü–µ—Å–æ—á–Ω–∏—Ü–µ–π'")
    print("   - –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å: '–ö–ª–∏–µ–Ω—Ç' –∏–ª–∏ '–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ'")
    print("\\n2. ‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:")
    print("   - –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 24 —á–∞—Å–æ–≤")
    print("   - –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
    print("\\n3. üîë –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–∫–µ–Ω–æ–º:")
    print("   - –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ scripts/setup_yandex_direct_token.py")
    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OAuth –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

    return 1

if __name__ == "__main__":
    sys.exit(main())