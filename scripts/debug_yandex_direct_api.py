#!/usr/bin/env python3
"""–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç."""

import json
import sys
from pathlib import Path
import urllib.request
import urllib.parse
import urllib.error

ROOT_DIR = Path(__file__).resolve().parent.parent
DEV_ENV_PATH = ROOT_DIR / "dev" / "env"

def load_env_vars():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ dev/env —Ñ–∞–π–ª–∞."""
    env_vars = {}
    if DEV_ENV_PATH.exists():
        for line in DEV_ENV_PATH.read_text().splitlines():
            if line.strip() and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                env_vars[key.strip()] = value.strip()
    return env_vars

def debug_get_campaigns():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ campaigns/get."""
    env_vars = load_env_vars()
    token = env_vars.get('DC_YANDEX_DIRECT_TOKEN')
    login = env_vars.get('DC_YANDEX_DIRECT_LOGIN')

    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ dev/env")
        return False

    print(f"üîë –¢–æ–∫–µ–Ω: {token[:15]}...")
    print(f"üë§ –õ–æ–≥–∏–Ω: '{login}' (–¥–ª–∏–Ω–∞: {len(login) if login else 0})")

    # –£–±–∏—Ä–∞–µ–º login –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π
    if login and not login.strip():
        login = None
        print("üîÑ –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç–æ–π –ª–æ–≥–∏–Ω (—Ä–æ–ª—å '–ö–ª–∏–µ–Ω—Ç')")

    sandbox_url = "https://api-sandbox.direct.yandex.com/json/v5/campaigns"

    headers = {
        "Authorization": f"Bearer {token}",
        "Accept-Language": "ru",
        "Content-Type": "application/json; charset=utf-8",
        "User-Agent": "DeepCalm/1.0",
    }

    if login:
        headers["Client-Login"] = login
        print(f"üè¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º Client-Login: {login}")
    else:
        print("üë§ –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ Client-Login (—Ä–æ–ª—å '–ö–ª–∏–µ–Ω—Ç')")

    payload = {
        "method": "get",
        "params": {
            "SelectionCriteria": {},
            "FieldNames": ["Id", "Name", "Status", "State", "Type"]
        }
    }

    print(f"\\nüì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:")
    print(f"URL: {sandbox_url}")
    print(f"Method: POST")
    print(f"Headers: {json.dumps({k: (v[:15] + '...' if k == 'Authorization' else v) for k, v in headers.items()}, indent=2)}")
    print(f"Payload: {json.dumps(payload, indent=2, ensure_ascii=False)}")

    try:
        request_data = json.dumps(payload).encode('utf-8')
        req = urllib.request.Request(
            sandbox_url,
            data=request_data,
            headers=headers,
            method='POST'
        )

        with urllib.request.urlopen(req, timeout=15.0) as response:
            status_code = response.getcode()
            response_data = response.read().decode('utf-8')

        print(f"\\nüìä –û—Ç–≤–µ—Ç:")
        print(f"–°—Ç–∞—Ç—É—Å: {status_code}")

        try:
            data = json.loads(response_data)
            print(f"JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
            print(json.dumps(data, indent=2, ensure_ascii=False))

            if "result" in data:
                campaigns = data["result"].get("Campaigns", [])
                print(f"\\n‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π: {len(campaigns)}")
                return True
            elif "error" in data:
                error = data["error"]
                print(f"\\n‚ùå –û—à–∏–±–∫–∞ API:")
                print(f"   –ö–æ–¥: {error.get('error_code')}")
                print(f"   –°—Ç—Ä–æ–∫–∞: {error.get('error_string')}")
                print(f"   –î–µ—Ç–∞–ª–∏: {error.get('error_detail')}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {error.get('request_id', 'N/A')}")
                return False
            else:
                print(f"\\n‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞")
                return False

        except json.JSONDecodeError:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON:")
            print(response_data)
            return False

    except urllib.error.HTTPError as e:
        status_code = e.code
        response_data = e.read().decode('utf-8')

        print(f"\\n‚ùå HTTP –æ—à–∏–±–∫–∞ {status_code}")
        print(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:")
        try:
            error_data = json.loads(response_data)
            print(json.dumps(error_data, indent=2, ensure_ascii=False))
        except:
            print(response_data)
        return False

    except Exception as e:
        print(f"\\n‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    print("=== –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç ===\\n")
    debug_get_campaigns()