#!/usr/bin/env python3
"""–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–µ—Å–æ—á–Ω–∏—Ü–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç —Å —Ç–µ–∫—É—â–∏–º —Ç–æ–∫–µ–Ω–æ–º."""

import json
import os
import sys
from pathlib import Path

import urllib.request
import urllib.parse
import urllib.error

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ env —Ñ–∞–π–ª–∞
ROOT_DIR = Path(__file__).resolve().parent.parent
DEV_ENV_PATH = ROOT_DIR / "dev" / "env"

def load_env_vars():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ dev/env —Ñ–∞–π–ª–∞."""
    env_vars = {}
    if DEV_ENV_PATH.exists():
        for line in DEV_ENV_PATH.read_text().splitlines():
            if line.strip() and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                env_vars[key.strip()] = value.strip()
    return env_vars

def test_yandex_direct_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç API."""
    env_vars = load_env_vars()

    token = env_vars.get('DC_YANDEX_DIRECT_TOKEN')
    login = env_vars.get('DC_YANDEX_DIRECT_LOGIN')

    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ dev/env")
        return False

    print(f"üîë –¢–æ–∫–µ–Ω: {token[:10]}...")
    if login:
        print(f"üë§ –õ–æ–≥–∏–Ω: {login}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–µ—Å–æ—á–Ω–∏—Ü–µ
    sandbox_url = "https://api-sandbox.direct.yandex.com/json/v5/campaigns"

    headers = {
        "Authorization": f"Bearer {token}",
        "Accept-Language": "ru",
        "Content-Type": "application/json; charset=utf-8",
        "User-Agent": "DeepCalm/1.0",
    }

    if login:
        headers["Client-Login"] = login

    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–π
    payload = {
        "method": "get",
        "params": {
            "SelectionCriteria": {},
            "FieldNames": ["Id", "Name", "Status", "State"]
        }
    }

    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–µ—Å–æ—á–Ω–∏—Ü–µ...")
    print(f"URL: {sandbox_url}")
    print(f"Headers: {json.dumps({k: v[:10] + '...' if k == 'Authorization' else v for k, v in headers.items()}, indent=2)}")

    try:
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å
        request_data = json.dumps(payload).encode('utf-8')
        req = urllib.request.Request(
            sandbox_url,
            data=request_data,
            headers=headers,
            method='POST'
        )

        with urllib.request.urlopen(req, timeout=15.0) as response:
            status_code = response.getcode()
            response_data = response.read().decode('utf-8')

        print(f"\nüìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {status_code}")

        if status_code == 200:
            data = json.loads(response_data)
            if "result" in data:
                campaigns = data["result"].get("Campaigns", [])
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π: {len(campaigns)}")
                for campaign in campaigns[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"  - {campaign.get('Name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {campaign.get('Id')})")
                return True
            elif "error" in data:
                error = data["error"]
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {error.get('error_string', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                print(f"   –ö–æ–¥: {error.get('error_code')}")
                print(f"   –î–µ—Ç–∞–ª–∏: {error.get('error_detail', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}")
                return False

        print(f"\nüìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:")
        try:
            print(json.dumps(json.loads(response_data), indent=2, ensure_ascii=False))
        except:
            print(response_data)

    except urllib.error.HTTPError as e:
        status_code = e.code
        response_data = e.read().decode('utf-8')

        print(f"\nüìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {status_code}")

        if status_code == 401:
            print("‚ùå –û—à–∏–±–∫–∞ 401: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫")
            print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization")
            print("   - –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Å–æ—á–Ω–∏—Ü–µ")
        elif status_code == 403:
            print("‚ùå –û—à–∏–±–∫–∞ 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Å–æ—á–Ω–∏—Ü–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç")
            print("   - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API")
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status_code}")

        print(f"\nüìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:")
        try:
            print(json.dumps(json.loads(response_data), indent=2, ensure_ascii=False))
        except:
            print(response_data)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

    return False

def test_oauth_token_validity():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å OAuth —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Yandex ID API."""
    env_vars = load_env_vars()
    token = env_vars.get('DC_YANDEX_DIRECT_TOKEN')

    if not token:
        return False

    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å OAuth —Ç–æ–∫–µ–Ω–∞...")

    try:
        req = urllib.request.Request(
            "https://login.yandex.ru/info",
            headers={"Authorization": f"OAuth {token}"}
        )

        with urllib.request.urlopen(req, timeout=10.0) as response:
            status_code = response.getcode()
            response_data = response.read().decode('utf-8')

        if status_code == 200:
            data = json.loads(response_data)
            print(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data.get('login', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            return True
        else:
            print(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ –≤–∞–ª–∏–¥–µ–Ω (—Å—Ç–∞—Ç—É—Å: {status_code})")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

if __name__ == "__main__":
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç ===\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    token_valid = test_oauth_token_validity()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    api_works = test_yandex_direct_connection()

    print("\n" + "="*50)
    if token_valid and api_works:
        print("üéâ –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        sys.exit(0)
    elif token_valid and not api_works:
        print("üîß –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –Ω–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Å–æ—á–Ω–∏—Ü–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –î–∏—Ä–µ–∫—Ç–∞")
        print("2. –ü–æ–¥–æ–∂–¥–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 24 —á–∞—Å–æ–≤)")
        print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Client-Login")
        sys.exit(1)
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–∫–µ–Ω–æ–º –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
        print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ scripts/setup_yandex_direct_token.py")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ oauth.yandex.ru")
        sys.exit(1)