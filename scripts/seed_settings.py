#!/usr/bin/env python3
"""
DeepCalm ‚Äî Seed Initial Settings

–°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è AI Analyst –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
"""
import requests
import sys
from typing import List, Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
API_BASE = "http://127.0.0.1:8000/api/v1"

# –ù–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Phase 1.5
INITIAL_SETTINGS = [
    # AI Analyst –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    {
        "key": "openai_api_key",
        "value": "sk-your-openai-key-here",
        "value_type": "string",
        "category": "ai",
        "description": "OpenAI API –∫–ª—é—á –¥–ª—è GPT-4 –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–º–ø–∞–Ω–∏–π",
        "updated_by": "system"
    },
    {
        "key": "ai_model",
        "value": "gpt-4",
        "value_type": "string",
        "category": "ai",
        "description": "–ú–æ–¥–µ–ª—å OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (gpt-4, gpt-3.5-turbo)",
        "updated_by": "system"
    },
    {
        "key": "ai_temperature",
        "value": "0.3",
        "value_type": "float",
        "category": "ai",
        "description": "Temperature –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ (0.0-1.0, 0.3 = –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ)",
        "updated_by": "system"
    },
    {
        "key": "ai_max_tokens",
        "value": "2000",
        "value_type": "int",
        "category": "ai",
        "description": "–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ AI Analyst",
        "updated_by": "system"
    },

    # Financial limits
    {
        "key": "max_campaign_budget",
        "value": "100000",
        "value_type": "int",
        "category": "financial",
        "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏ (—Ä—É–±–ª–µ–π)",
        "updated_by": "system"
    },
    {
        "key": "min_roas_threshold",
        "value": "2.0",
        "value_type": "float",
        "category": "financial",
        "description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ROAS –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏",
        "updated_by": "system"
    },
    {
        "key": "alert_cac_threshold",
        "value": "3000",
        "value_type": "int",
        "category": "alerts",
        "description": "CAC –≤—ã—à–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç –∞–ª–µ—Ä—Ç (—Ä—É–±–ª–µ–π)",
        "updated_by": "system"
    },

    # Operational settings
    {
        "key": "reports_enabled",
        "value": "true",
        "value_type": "bool",
        "category": "operational",
        "description": "–í–∫–ª—é—á–µ–Ω—ã –ª–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã",
        "updated_by": "system"
    },
    {
        "key": "reports_email",
        "value": "admin@deepcalm.local",
        "value_type": "string",
        "category": "operational",
        "description": "Email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤",
        "updated_by": "system"
    },
    {
        "key": "analysis_frequency_hours",
        "value": "24",
        "value_type": "int",
        "category": "operational",
        "description": "–ß–∞—Å—Ç–æ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–º–ø–∞–Ω–∏–π (—á–∞—Å–æ–≤)",
        "updated_by": "system"
    },

    # Pricing strategy
    {
        "key": "default_target_cac",
        "value": "2500",
        "value_type": "int",
        "category": "pricing",
        "description": "–¶–µ–ª–µ–≤–æ–π CAC –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ä—É–±–ª–µ–π)",
        "updated_by": "system"
    },
    {
        "key": "default_target_roas",
        "value": "3.0",
        "value_type": "float",
        "category": "pricing",
        "description": "–¶–µ–ª–µ–≤–æ–π ROAS –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
        "updated_by": "system"
    }
]


def create_setting(setting: Dict) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–µ—Ä–µ–∑ API"""
    try:
        response = requests.post(f"{API_BASE}/settings", json=setting, timeout=10)
        if response.status_code == 201:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞: {setting['key']}")
            return True
        elif response.status_code == 409:
            print(f"‚ö†Ô∏è  –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {setting['key']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {setting['key']} - {response.text}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {setting['key']}: {e}")
        return False


def check_api_health() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API"""
    try:
        response = requests.get(f"http://127.0.0.1:8000/health", timeout=5)
        return response.status_code == 200
    except:
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ DeepCalm Settings Seeder")
    print("=" * 40)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    if not check_api_health():
        print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:8000")
        sys.exit(1)

    print(f"üìã –°–æ–∑–¥–∞–µ–º {len(INITIAL_SETTINGS)} –Ω–∞—á–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")

    success_count = 0
    for setting in INITIAL_SETTINGS:
        if create_setting(setting):
            success_count += 1

    print("=" * 40)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(INITIAL_SETTINGS)}")

    if success_count < len(INITIAL_SETTINGS):
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        sys.exit(1)
    else:
        print("üéâ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    main()